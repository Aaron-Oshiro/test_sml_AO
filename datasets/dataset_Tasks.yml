unique_name: dataset_Tasks
object_type: dataset
label: Tasks
columns:
  - name: TopTaskID
    data_type: double
  - name: ProjectID
    data_type: long
  - name: Top Task Number
    data_type: string
  - name: Project Number
    data_type: string
  - name: Contract Group
    data_type: string
  - name: Performance Obligation Number
    data_type: string
  - name: .Forecast Revenue
    data_type: double
  - name: Task Count
    data_type: long
  - name: Date Last Billed
    data_type: datetime
  - name: BELMlookup
    data_type: double
    sql: >-
      null /*LOOKUPVALUE(BELMLookup[Value], BELMLookup[CompanyGPLoc],
      Tasks[CompanyGPLoc]) TODO: Replace with valid SQL*/
  - name: CompanyGPLoc
    data_type: string
  - name: Top Task Number and Name
    data_type: string
  - name: Task
    data_type: string
  - name: Task (long)
    data_type: string
  - name: Project & Top Task
    data_type: string
  - name: TaskID
    data_type: double
  - name: c.ForecastRevenue
    data_type: double
    sql: >-
      null /*if(RELATED(Projects[Project Status])="CLOSED",
      RELATED(PFMClosedProjects[.Forecast Revenue]), Tasks[.Forecast Revenue])
      TODO: Replace with valid SQL*/
  - name: cITD Revenue
    data_type: double
    sql: >-
      null /*if(RELATED(Projects[Project Status])="CLOSED",
      RELATED(PFMClosedProjects[ITD Actual Revenue]), RELATED(RevBillReceipt[ITD
      Actual Revenue])) TODO: Replace with valid SQL*/
  - name: Task Manager
    data_type: string
  - name: Missing BELM Flag
    data_type: boolean
    sql: 'null /*ISBLANK(Tasks[BELMlookup]) TODO: Replace with valid SQL*/'
  - name: Task Market
    data_type: string
  - name: Task Submarket
    data_type: string
  - name: Task Owning Company
    data_type: string
  - name: Task Owning Global Practice
    data_type: string
  - name: Task Owning Office Location
    data_type: string
  - name: Task Owning Department
    data_type: string
  - name: Top Task Contract Role
    data_type: string
  - name: countrows1
    data_type: int
    sql: '1'
connection_id: master
sql: >-
  SELECT distinct TopTasks.TopTaskID , TopTasks.ProjectID , TopTasks.[Top Task
  Number] , TopTasks.[Top Task Number and Name] , TopTasks.[Top Task Manager
  Name] [Task Manager] , TopTasks.[Obsolete Top Task Market] [Task Market] ,
  TopTasks.[Obsolete Top Task Submarket] [Task Submarket] , TopTasks.[Top Task
  Owning Company] [Task Owning Company] , TopTasks.[Top Task Owning Global
  Practice] [Task Owning Global Practice] , TopTasks.[Top Task Owning Office
  Location] [Task Owning Office Location] , TopTasks.[Top Task Owning
  Department] [Task Owning Department] , Projects.[Project Number] ,
  Projects.[Contract Group Number] AS [Contract Group] , CASE WHEN
  ContractGroups.[POB_FLAG] <> 'N' THEN Projects.[Contract Group Number] + '-' +
  ISNULL(PerformanceObligations.[POB_NO], '00') ELSE Projects.[Contract Group
  Number] END AS [Performance Obligation Number] ,
  TopTaskRevenueForecast.[.Forecast Revenue] , Tasks.[Task Count] ,
  TopTaskBillings.[Date Last Billed] --, Rcpts.[Date Last Paid] , TopTasks.[Top
  Task Owning Company] + '.' + TopTasks.[Top Task Owning Global Practice] + '.'
  + TopTasks.[Top Task Owning Office Location] AS [CompanyGPLoc] , TopTasks.[Top
  Task Number] + '-' + TopTasks.[Top Task Name] --+ ' ' + if(ISBLANK([Top Task
  Manager Last Name]),RELATED(Projects[Project Manager Last Name]),"(" & [Top
  Task Manager Last Name] & ")") + coalesce(' (' + People.[Person Current Last
  Name] + ')', '') AS [Task] , Projects.[Project Number] + '-' + TopTasks.[Top
  Task Number] + '-' + TopTasks.[Top Task Name] + coalesce(' (' + People.[Person
  Current Last Name] + ')', '') AS [Task (long)] , Projects.[Project Number] +
  TopTasks.[Top Task Number] AS [Project & Top Task] , TopTasks.TopTaskID as
  TaskID , TopTasks.[Top Task Contract Role] FROM (select * from
  Model_Common.dbo.Top_Tasks_West_lite union all select * from
  Model_Common.dbo.Top_Tasks_East_lite) TopTasks INNER JOIN (select ProjectID,
  [Project Number], [Contract Group Number], [Project Billing Level] from
  Model_Common.dbo.Projects_West_lite where [Project Direct Flag] = 'Y' AND
  [Project Status] <> 'PERMANENTLY CLOSED' union all select ProjectID, [Project
  Number], [Contract Group Number], [Project Billing Level] from
  Model_Common.dbo.Projects_East_lite where [Project Direct Flag] = 'Y' AND
  [Project Status] <> 'PERMANENTLY CLOSED') Projects ON TopTasks.ProjectID =
  Projects.ProjectID AND ((Projects.[Project Billing Level] = 'TOP_TASK' OR
  Projects.[Project Billing Level] IS NULL) or TopTasks.[Top Task ID] < 0) LEFT
  OUTER JOIN Model_Common.dbo.People on People.PersonID = TopTasks.[Top Task
  Manager Person ID] LEFT OUTER JOIN (select PROJECT_ID, [POB_FLAG] from
  AnalyticsSource.dbo.ContractGroups union all select PROJECT_ID, [POB_FLAG]
  from AnalyticsSource.east.ContractGroups) ContractGroups ON TopTasks.ProjectID
  = ContractGroups.PROJECT_ID LEFT OUTER JOIN (select * from
  AnalyticsSource.dbo.PerformanceObligations union all select * from
  AnalyticsSource.east.PerformanceObligations) PerformanceObligations ON
  TopTasks.ProjectID = PerformanceObligations.PROJECT_ID AND TopTasks.TopTaskID
  = PerformanceObligations.TOP_TASK_ID LEFT OUTER JOIN ( select CASE WHEN
  p.[Project Billing Level] = 'TOP_TASK' THEN t.TopTaskID ELSE p.ProjectID * - 1
  END TopTaskID, count(*) [Task Count] from Model_Common.dbo.Projects_West_lite
  p left join Model_Common.dbo.Tasks_West_lite t on p.ProjectID = t.ProjectID
  where p.[Project Direct Flag] = 'Y' AND p.[Project Status] <> 'PERMANENTLY
  CLOSED' group by CASE WHEN p.[Project Billing Level] = 'TOP_TASK' THEN
  t.TopTaskID ELSE p.ProjectID * - 1 END union all select CASE WHEN p.[Project
  Billing Level] = 'TOP_TASK' THEN t.TopTaskID ELSE p.ProjectID * - 1 END
  TopTaskID, count(*) [Task Count] from Model_Common.dbo.Projects_East_lite p
  left join Model_Common.dbo.Tasks_East_lite t on p.ProjectID = t.ProjectID
  where p.[Project Direct Flag] = 'Y' AND p.[Project Status] <> 'PERMANENTLY
  CLOSED' group by CASE WHEN p.[Project Billing Level] = 'TOP_TASK' THEN
  t.TopTaskID ELSE p.ProjectID * - 1 END ) Tasks on Tasks.TopTaskID =
  TopTasks.TopTaskID left join ( SELECT distinct TopTaskID ,
  max(DATE_LAST_BILLED) over (partition by TopTaskID) [Date Last Billed] FROM (
  SELECT --Billings.PROJECT_ID, (CASE WHEN PlanProjects.[Project Billing Level]
  = 'TOP_TASK' THEN Tasks.TopTaskId ELSE Billings.PROJECT_ID * - 1 END) AS
  TopTaskID, Billings.FUNCTIONAL_BILLED_AMOUNT AS Invoiced,
  Billings.DATE_LAST_BILLED, (CASE WHEN YEAR(GL_DATE) < 2000 THEN
  DATEFROMPARTS(2000, 1, 1) ELSE DATEFROMPARTS(YEAR(GL_DATE), MONTH(GL_DATE), 1)
  END) AS GL_DATE FROM (select * from AnalyticsSource.dbo.Billings union all
  select * from AnalyticsSource.east.Billings) Billings left join (select [Task
  ID], TopTaskId from Model_Common.dbo.Tasks_West_lite union all select [Task
  ID], TopTaskId from Model_Common.dbo.Tasks_East_lite) Tasks on Tasks.[Task ID]
  = Billings.TASK_ID INNER JOIN (SELECT DISTINCT
  FinancialPlanVersions.PROJECT_ID, DirectProjects.[Project Billing Level] FROM
  (select * from AnalyticsSource.dbo.FinancialPlanVersions union all select *
  from AnalyticsSource.east.FinancialPlanVersions) FinancialPlanVersions INNER
  JOIN (select ProjectID, [Project Billing Level] from
  Model_Common.dbo.Projects_West_lite where [Project Direct Flag] = 'Y' AND
  [Project Status] <> 'PERMANENTLY CLOSED' union all select ProjectID, [Project
  Billing Level] from Model_Common.dbo.Projects_East_lite where [Project Direct
  Flag] = 'Y' AND [Project Status] <> 'PERMANENTLY CLOSED') AS DirectProjects ON
  FinancialPlanVersions.PROJECT_ID = DirectProjects.ProjectID WHERE
  (FinancialPlanVersions.FIN_PLAN_TYPE_ID IN (10040, 10060, 10062)) /* Approved
  Cost Budget, Primary Cost Forecast, Primary Revenue Forecast */ AND
  (FinancialPlanVersions.VERSION_NAME <> 'CONVERTED VERSION') AND
  (FinancialPlanVersions.BASELINED_DATE >= CONVERT(DATETIME, '2013-07-01
  00:00:00', 102)) OR (FinancialPlanVersions.FIN_PLAN_TYPE_ID = 156596) /*
  To-Date Actuals Cost */ ) AS PlanProjects ON Billings.PROJECT_ID =
  PlanProjects.PROJECT_ID --LEFT OUTER JOIN --(SELECT DISTINCT PROJECT_ID,
  BILLING_LEVEL FROM AnalyticsSource.dbo.MIS_PROJECT_ATTRIBUTES union all SELECT
  DISTINCT PROJECT_ID, BILLING_LEVEL FROM
  AnalyticsSource.east.MIS_PROJECT_ATTRIBUTES) AS MIS_PROJECT_ATTRIBUTES ON
  Billings.PROJECT_ID = MIS_PROJECT_ATTRIBUTES.PROJECT_ID WHERE
  Billings.FUNCTIONAL_BILLED_AMOUNT <> 0 AND Billings.PROJECT_ID <> 1427177 ) AS
  InvoicedBillings GROUP BY TopTaskID, DATE_LAST_BILLED, GL_DATE HAVING
  (SUM(Invoiced) <> 0) ) TopTaskBillings on TopTaskBillings.TopTaskID =
  Tasks.TopTaskID left join ( --R12 All Lines except Labor Lines and Top Task CW
  SELECT CASE WHEN POCResourceAssignments.TASK_ID = 0 or Projects.[Project
  Billing Level] = 'PROJECT' THEN - 1 * POCResourceAssignments.PROJECT_ID ELSE
  Tasks.TopTaskId END AS TopTaskID,
  round(sum(isnull(POCFinancialPlanLines.REVENUE, 0)), 4) AS [.Forecast Revenue]
  FROM AnalyticsSource.dbo.POCFinancialPlanLines INNER JOIN
  AnalyticsSource.dbo.POCResourceAssignments ON
  POCFinancialPlanLines.RESOURCE_ASSIGNMENT_ID =
  POCResourceAssignments.RESOURCE_ASSIGNMENT_ID INNER JOIN
  AnalyticsSource.dbo.POCFinancialPlanVersions ON
  POCResourceAssignments.BUDGET_VERSION_ID =
  POCFinancialPlanVersions.BUDGET_VERSION_ID INNER JOIN
  AnalyticsSource.dbo.FinancialPlanTypes ON
  POCFinancialPlanVersions.FIN_PLAN_TYPE_ID =
  FinancialPlanTypes.FIN_PLAN_TYPE_ID AND (FinancialPlanTypes.NAME IN ('CM
  Actuals Revenue Forecast')) INNER JOIN (select ProjectID, [Project Billing
  Level] from Model_Common.dbo.Projects_West_lite where [Project Direct Flag] =
  'Y' AND [Project Status] <> 'PERMANENTLY CLOSED' union all select ProjectID,
  [Project Billing Level] from Model_Common.dbo.Projects_East_lite where
  [Project Direct Flag] = 'Y' AND [Project Status] <> 'PERMANENTLY CLOSED') AS
  Projects ON Projects.ProjectID = POCFinancialPlanVersions.PROJECT_ID LEFT JOIN
  (select [Task ID], TopTaskId from Model_Common.dbo.Tasks_West_lite where
  NOT([Task Number] IN (N'CONTINGENCY', N'WARRANTY')) union all select [Task
  ID], TopTaskId from Model_Common.dbo.Tasks_East_lite where NOT([Task Number]
  IN (N'CONTINGENCY', N'WARRANTY'))) Tasks ON Tasks.[Task ID] =
  POCResourceAssignments.TASK_ID --LEFT JOIN (select Project_ID, BILLING_LEVEL
  from AnalyticsSource.dbo.MIS_PROJECT_ATTRIBUTES union all select Project_ID,
  BILLING_LEVEL from AnalyticsSource.east.MIS_PROJECT_ATTRIBUTES)
  MIS_PROJECT_ATTRIBUTES ON Projects.Project_ID =
  MIS_PROJECT_ATTRIBUTES.PROJECT_ID WHERE --(POCFinancialPlanVersions.PROJECT_ID
  >= 232700) -- merge with legacy (POCFinancialPlanVersions.PROJECT_ID < 232700
  or POCFinancialPlanVersions.PROJECT_ID >= 232700 and Tasks.[Task ID] is not
  null) AND (NOT (POCResourceAssignments.RESOURCE_LIST_MEMBER_ID IN (66039,
  123956527))) /* People, LABOR OVERRUN */ group by CASE WHEN
  POCResourceAssignments.TASK_ID = 0 or Projects.[Project Billing Level] =
  'PROJECT' THEN - 1 * POCResourceAssignments.PROJECT_ID ELSE Tasks.TopTaskId
  END UNION ALL --BMcD Raw for R12 People Lines SELECT CASE WHEN
  POCResourceAssignments.TASK_ID = 0 or Projects.[Project Billing Level] =
  'PROJECT' THEN - 1 * POCResourceAssignments.PROJECT_ID ELSE Tasks.TopTaskId
  END AS TopTaskID, round(sum(POCFinancialPlanLines.INIT_REVENUE), 4) [.Forecast
  Revenue] FROM AnalyticsSource.dbo.POCFinancialPlanLines -- BMcD Raw for R12
  People Lines or BMcD Raw for R12 Labor Overrun Lines INNER JOIN
  AnalyticsSource.dbo.POCResourceAssignments ON
  POCFinancialPlanLines.RESOURCE_ASSIGNMENT_ID =
  POCResourceAssignments.RESOURCE_ASSIGNMENT_ID AND
  POCResourceAssignments.RESOURCE_LIST_MEMBER_ID in (66039, 123956527) /*
  People, LABOR OVERRUN */ INNER JOIN
  AnalyticsSource.dbo.POCFinancialPlanVersions ON
  POCResourceAssignments.BUDGET_VERSION_ID =
  POCFinancialPlanVersions.BUDGET_VERSION_ID INNER JOIN
  AnalyticsSource.dbo.FinancialPlanTypes ON
  POCFinancialPlanVersions.FIN_PLAN_TYPE_ID =
  FinancialPlanTypes.FIN_PLAN_TYPE_ID AND (FinancialPlanTypes.NAME IN ('CM
  Actuals Revenue Forecast')) INNER JOIN (select ProjectID, [Project Billing
  Level] from Model_Common.dbo.Projects_West_lite where [Project Direct Flag] =
  'Y' AND [Project Status] <> 'PERMANENTLY CLOSED' union all select ProjectID,
  [Project Billing Level] from Model_Common.dbo.Projects_East_lite where
  [Project Direct Flag] = 'Y' AND [Project Status] <> 'PERMANENTLY CLOSED')
  Projects ON Projects.ProjectID = POCFinancialPlanVersions.PROJECT_ID INNER
  JOIN (select [Task ID], TopTaskId from Model_Common.dbo.Tasks_West_lite where
  NOT([Task Number] IN (N'CONTINGENCY', N'WARRANTY')) union all select [Task
  ID], TopTaskId from Model_Common.dbo.Tasks_East_lite where NOT([Task Number]
  IN (N'CONTINGENCY', N'WARRANTY'))) Tasks ON Tasks.[Task ID] =
  POCResourceAssignments.TASK_ID --LEFT JOIN (select Project_ID, BILLING_LEVEL
  from AnalyticsSource.dbo.MIS_PROJECT_ATTRIBUTES union all select Project_ID,
  BILLING_LEVEL from AnalyticsSource.east.MIS_PROJECT_ATTRIBUTES)
  MIS_PROJECT_ATTRIBUTES ON Projects.ProjectID =
  MIS_PROJECT_ATTRIBUTES.PROJECT_ID group by CASE WHEN
  POCResourceAssignments.TASK_ID = 0 or Projects.[Project Billing Level] =
  'PROJECT' THEN - 1 * POCResourceAssignments.PROJECT_ID ELSE Tasks.TopTaskId
  END ) TopTaskRevenueForecast on TopTaskRevenueForecast.TopTaskID =
  Tasks.TopTaskID
